@inherits LayoutComponentBase

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small" />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="@Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText class="ml-3" Typo="Typo.h5">WebAssembly Blazor Example</MudText>
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    /// <summary>
    /// Used to control if the side bar is open or not.
    /// </summary>
    private bool _drawerOpen = true;

    /// <summary>
    /// Used to interact with javascript.
    /// </summary>
    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    /// <summary>
    /// The method hides the preloading (loading indicator and any styles needed before the mudblazor css is loaded) 
    /// after the client has rendered for the first time.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render or not.</param>
    /// <returns>A Task object for the async.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("removePreloading");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// The method toggles the drawer's open/close state.
    /// </summary>
    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
}
